@isTest
public class ObjectsAndFieldsAccessTest {
    /*static testMethod void myUnitTest() {
        Profile p = [SELECT Id, Name FROM Profile WHERE Name = 'Test1'];

        SA_Audit__Objects_And_Fields_Log__c objLog = new SA_Audit__Objects_And_Fields_Log__c();
        objLog.SA_Audit__Object_Type__c = 'Account';
        objLog.SA_Audit__Date__c = Datetime.Now();
        insert objLog;
        
        SA_Audit__Fields_Profile_Log__c fieldProfLog = new SA_Audit__Fields_Profile_Log__c();
        fieldProfLog.SA_Audit__ProfileId__c = p.Id;
        fieldProfLog.SA_Audit__Value__c = '[{"R":true,"parentId":"0PS0Y0000014QJjWAM","objType":"SA_Audit__Test_Object__c","id":"01k0Y0000BmLaL4QQK","field":"SA_Audit__Test_Object__c.SA_Audit__Test_Field__c","E":true},{"R":true,"parentId":"0PS0Y0000014QJjWAM","objType":"SA_Audit__Test_Object__c","id":"01k0Y0000BRqiFfQQJ","field":"SA_Audit__Test_Object__c.SA_Audit__Test_Field2__c","E":true}]';
        fieldProfLog.SA_Audit__Objects_And_Fields_Log__c = objLog.Id;
        insert fieldProfLog;
            
        
        Test.startTest();
            ObjectsAndFieldsAccess ctrl = new ObjectsAndFieldsAccess();
            
            system.assertequals(ctrl.selectedProfiles.size(), 2);
            ObjectsAndFieldsAccess.profilesList.add(new SelectOption(p.id, p.Name));
            ObjectsAndFieldsAccess.objectsList.add(new SelectOption('Account', 'Account'));
            ctrl.createSelectList();
            ObjectsAndFieldsAccess.profilesList.add(new SelectOption(p.id, p.Name));
            ObjectsAndFieldsAccess.profilesList.add(new SelectOption(p.id, p.Name));
            ObjectsAndFieldsAccess.objectsList.add(new SelectOption('Account', 'Account'));
            ctrl.createSelectList();
            ctrl.expandObject = 'Account';
            ctrl.retrieveRecords();
            system.assertequals(ctrl.objectPermisionWList.size(), 1);
            ctrl.expandObjects();
            system.assertequals(ctrl.dummyexpandObject, 'Account'); 
            ctrl.go();
            ctrl.selectedProfiles.add(new SelectOption(p.id, p.Name));
            ctrl.selectedProfiles.add(new SelectOption(p.id, p.Name));
            ctrl.selectedProfiles.add(new SelectOption(p.id, p.Name));
            ctrl.selectedProfiles.add(new SelectOption(p.id, p.Name));
            ctrl.selectedProfiles.add(new SelectOption(p.id, p.Name));
            ctrl.selectedProfiles.add(new SelectOption(p.id, p.Name));
            ctrl.selectedProfiles.add(new SelectOption(p.id, p.Name));
            ctrl.selectedProfiles.add(new SelectOption(p.id, p.Name));
            ctrl.go();
            
            system.assertEquals(ctrl.selectedProfiles.size(), 7);
            ctrl.selectedLog = (ID)objLog.Id;
            ctrl.objectNameMap.put('Account', 'Account');
            ctrl.getPermissionType();
            ctrl.getObjectsType();
            
            
            ctrl.RevertChanges();
            ctrl.ExportToExcel();
            ctrl.expandObject = 'Account';
            ctrl.expandObjects();
            ctrl.selectedLog = (ID)objLog.Id;
            ctrl.objectNameMap.put('Account', 'Account');
            //ctrl.changeLog();
            ctrl.expandObjects();
            ctrl.printPDF();
            
            //ctrl.selectedLog = objLog.Id;
            //ctrl.objectNameMap.put('SA_Audit__Test_Object__c', 'Test Object');
            //ctrl.changeLog();

            ctrl.readSelectOnlyRecordsWithSelectedCheckboxes();
            ctrl.editSelectOnlyRecordsWithSelectedCheckboxes();
            ctrl.readSelectOnlySelectedCheckbox = true;
            ctrl.editSelectOnlySelectedCheckbox = true;
            ctrl.readSelectOnlyRecordsWithSelectedCheckboxes();
            ctrl.editSelectOnlyRecordsWithSelectedCheckboxes();
            ctrl.yesPopUp();
            ctrl.closePopup();
            ctrl.SelectProfilesForExportToExcel();
            for(Integer i = 1; i <= 101; i++) {
                ctrl.selectedProfileList.add(new SelectOption(p.id, p.Name));
            }
            ctrl.SelectProfilesForExportToExcel();
            ctrl.selectedProfileList.add(new SelectOption(p.id, p.Name));
            ctrl.selectedProfileList.add(new SelectOption(p.id, p.Name));
            ctrl.SelectProfilesForExportToExcel();
        
        Test.stopTest();
    }*/
    static testMethod void myUnitTest1() {
        Profile p = [SELECT Id, Name FROM Profile WHERE Name = 'Test1'];

        SA_Audit__Objects_And_Fields_Log__c objLog = new SA_Audit__Objects_And_Fields_Log__c();
        objLog.SA_Audit__Object_Type__c = 'Account';
        objLog.SA_Audit__Date__c = Datetime.Now();
        insert objLog;
        
        SA_Audit__Fields_Profile_Log__c fieldProfLog = new SA_Audit__Fields_Profile_Log__c();
        fieldProfLog.SA_Audit__ProfileId__c = p.Id;
        fieldProfLog.SA_Audit__Value__c = '[{"R":true,"parentId":"0PS0Y0000014QJjWAM","objType":"SA_Audit__Test_Object__c","id":"01k0Y0000BmLaL4QQK","field":"SA_Audit__Test_Object__c.SA_Audit__Test_Field__c","E":true},{"R":true,"parentId":"0PS0Y0000014QJjWAM","objType":"SA_Audit__Test_Object__c","id":"01k0Y0000BRqiFfQQJ","field":"SA_Audit__Test_Object__c.SA_Audit__Test_Field2__c","E":true}]';
        fieldProfLog.SA_Audit__Objects_And_Fields_Log__c = objLog.Id;
        insert fieldProfLog;
            
        
        Test.startTest();
            ObjectsAndFieldsAccess ctrl = new ObjectsAndFieldsAccess();
            system.assertequals(ctrl.selectedProfiles.size(), 2);
            ObjectsAndFieldsAccess.profilesList.add(new SelectOption(p.id, p.Name));
            ObjectsAndFieldsAccess.objectsList.add(new SelectOption('Account', 'Account'));
            ctrl.createSelectList();
            ObjectsAndFieldsAccess.profilesList.add(new SelectOption(p.id, p.Name));
            ObjectsAndFieldsAccess.profilesList.add(new SelectOption(p.id, p.Name));
            ObjectsAndFieldsAccess.objectsList.add(new SelectOption('Account', 'Account'));
            ctrl.createSelectList();
            ctrl.expandObject = 'Account';
            ctrl.retrieveRecords();
            system.assertequals(ctrl.objectPermisionWList.size(), 1);
            
            String field;
            for (String fieldName : ctrl.fieldPermissionMap.keySet()){
                for(ObjectsAndFieldsAccess.FieldPermissionWrapper fp : ctrl.fieldPermissionMap.get(fieldName)) {
                    fp.R = true;
                    fp.E = true;
                    field = fieldName;
                }
            }
            ctrl.save();

        Test.stopTest();
    }
    
    static testMethod void myUnitTest2() {
        Profile p = [SELECT Id, Name FROM Profile WHERE Name = 'Test1'];

        SA_Audit__Objects_And_Fields_Log__c objLog = new SA_Audit__Objects_And_Fields_Log__c();
        objLog.SA_Audit__Object_Type__c = 'Account';
        objLog.SA_Audit__Date__c = Datetime.Now();
        insert objLog;
        
        SA_Audit__Fields_Profile_Log__c fieldProfLog = new SA_Audit__Fields_Profile_Log__c();
        fieldProfLog.SA_Audit__ProfileId__c = p.Id;
        fieldProfLog.SA_Audit__Value__c = '[{"R":true,"parentId":"0PS0Y0000014QJjWAM","objType":"SA_Audit__Test_Object__c","id":"01k0Y0000BmLaL4QQK","field":"SA_Audit__Test_Object__c.SA_Audit__Test_Field__c","E":true},{"R":true,"parentId":"0PS0Y0000014QJjWAM","objType":"SA_Audit__Test_Object__c","id":"01k0Y0000BRqiFfQQJ","field":"SA_Audit__Test_Object__c.SA_Audit__Test_Field2__c","E":true}]';
        fieldProfLog.SA_Audit__Objects_And_Fields_Log__c = objLog.Id;
        insert fieldProfLog;
            
        
        Test.startTest();
            ObjectsAndFieldsAccess ctrl = new ObjectsAndFieldsAccess();
            ctrl.selectedPerm = 'All Profiles & Permission Sets';
            ctrl.changeType();
        	System.assertEquals('All Profiles & Permission Sets', ctrl.selectedPerm);
            ctrl.selectedPerm = 'All Profiles';
            ctrl.changeType();
        	System.assertEquals('All Profiles', ctrl.selectedPerm);
            ctrl.selectedPerm = 'Managed Package Profiles & Permission Sets';
            ctrl.changeType();
        	System.assertEquals('Managed Package Profiles & Permission Sets', ctrl.selectedPerm);
            ctrl.selectedPerm = 'Managed Package Permission Sets';
            ctrl.changeType();
        	System.assertEquals('Managed Package Permission Sets', ctrl.selectedPerm);
            ctrl.selectedPerm = 'Organization Profiles';
            ctrl.changeType();
        	System.assertEquals('Organization Profiles', ctrl.selectedPerm);
            ctrl.selectedPerm = 'Managed Package Profiles';
            ctrl.changeType();
        	System.assertEquals('Managed Package Profiles', ctrl.selectedPerm);
            ctrl.selectedPerm = 'All Permission Sets';
            ctrl.changeType();
        	System.assertEquals('All Permission Sets', ctrl.selectedPerm);
            ctrl.selectedPerm = 'Organization Permission Sets';
            ctrl.changeType();
        	System.assertEquals('Organization Permission Sets', ctrl.selectedPerm);
            ctrl.selectedPerm = 'Organization Profiles & Permission Sets';
            ctrl.changeType();
        	System.assertEquals('Organization Profiles & Permission Sets', ctrl.selectedPerm);
        Test.stopTest();
    }
    static testMethod void openContactUSLinkTest(){
        Test.startTest();
        PageReference pageRef;
        pageRef = new PageReference('https://applicationperfection.com/contact/');
        ObjectsAndFieldsAccess ctrl = new ObjectsAndFieldsAccess();
        ctrl.openContactUSLink();
        System.assertNotEquals(null, pageRef);
        Test.stopTest();
    }
}